openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: >-
    This APIs for iwf SDKs to operate workflows
  version: 1.0.0
  title: Workflow APIs
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  # workflow APIs are hosted by iWF server for iWF SDKs to call
  /api/v1/workflow/start:
    post:
      summary: "start a workflow"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowStartRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStartResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/signal:
    post:
      summary: "signal a workflow"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowSignalRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/stop:
    post:
      summary: "stop a workflow"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowStopRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/dataobjects/get:
    post:
      summary: "get workflow data objects"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowGetDataObjectsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowGetDataObjectsResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/searchattributes/get:
    post:
      summary: "get workflow search attributes"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowGetSearchAttributesRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowGetSearchAttributesResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/get:
    post:
      summary: "get a workflow's status and results(if completed & requested)"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowGetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowGetResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/getWithWait: ## this will wait for workflow to close if still running
    post:
      summary: "get a workflow's status and results(if completed & requested), wait if the workflow is still running"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowGetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowGetResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/search:
    post:
      summary: "search for workflows by a search attribute query"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowSearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowSearchResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflow/reset:
    post:
      summary: "reset a workflow"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowResetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResetResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # workflowState APIs are hosted by iWF SDK for iWF server to call
  /api/v1/workflowState/start:
    post:
      summary: "for invoking WorkflowState.start API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowStateStartRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStateStartResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workflowState/decide:
    post:
      summary: "for invoking WorkflowState.decide API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowStateDecideRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStateDecideResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'                
components:
  schemas:
    KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EncodedObject'
    EncodedObject:
      type: object
      properties:
        encoding:
          type: string
        data:
          type: string
    SearchAttributeKeyAndType:
      type: object
      properties:
        key:
          type: string
        valueType:
          type: string
          enum:
            - KEYWORD
            - INT
    SearchAttribute:
      type: object
      properties:
        key:
          type: string
        stringValue: # for any value than can be stored as string: keyword, text, wildcard
          type: string
        integerValue:
          type: integer
          format: int64
        valueType:
          type: string
          enum:
            - KEYWORD
            - INT
    RetryPolicy:
      type: object
      properties:
        initialInterval: # default to 1s
          type: number
        backoffCoefficient: # default to 2
          type: number
        maximumInterval: # default to 100x of initial interval
          type: number
        maximumAttempts: # default to 0, means unlimited
          type: integer
# TODO NOTE:
#  1. this will need more work on server to allow customize error types for workflow results
#  2. probably only can apply to workflow
#        nonRetryableErrorTypes:
#          type: array
#          items:
#            type: string
    WorkflowStateOptions:
      type: object
      properties:
        searchAttributesLoadingPolicy:
          $ref: '#/components/schemas/PersistenceLoadingPolicy'
        dataObjectsLoadingPolicy:
          $ref: '#/components/schemas/PersistenceLoadingPolicy'
        commandCarryOverPolicy:
          $ref: '#/components/schemas/CommandCarryOverPolicy'
        startApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        decideApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
    WorkflowStartOptions:
      type: object
      properties:
        workflowIDReusePolicy:
          type: string
          enum:
            - ALLOW_DUPLICATE_FAILED_ONLY
            - ALLOW_DUPLICATE
            - REJECT_DUPLICATE
            - TERMINATE_IF_RUNNING
        cronSchedule:
          type: string
        retryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
    PersistenceLoadingPolicy:
      type: object
      properties:
        persistenceLoadingType:
          type: string
          enum:
            - LOAD_ALL_WITHOUT_LOCKING
#            - LOAD_ALL_WITH_EXCLUSIVE_LOCK
#            - LOAD_PARTIAL_WITHOUT_LOCKING
#            - LOAD_PARTIAL_WITH_EXCLUSIVE_LOCK
        partialLoadingKeys:
          type: array
          items:
            type: string
    CommandCarryOverPolicy:
      type: object
      properties:
        commandCarryOverType:
          type: string
          enum:
            - NONE
            #- ALL_UNFINISHED
    ErrorResponse:
      type: object
      properties:
        detail: 
          type: string
        subStatus: 
          type: string  
    WorkflowStartRequest:
      type: object
      required:
        - workflowId
        - iwfWorkerUrl
        - iwfWorkflowType
        - startStateId
        - workflowTimeoutSeconds
      properties:
        workflowId:
          type: string
        iwfWorkflowType:
          type: string
        workflowTimeoutSeconds:
          type: integer
        iwfWorkerUrl:
          type: string
        startStateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateOptions:
          $ref: '#/components/schemas/WorkflowStateOptions'
        workflowStartOptions:
          $ref: '#/components/schemas/WorkflowStartOptions'
    WorkflowStartResponse:
      type: object
      properties:
        workflowRunId:
          type: string
    WorkflowSignalRequest:
      type: object
      required:
        - workflowId
        - signalChannelName
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        signalChannelName:
          type: string
        signalValue:
          $ref: '#/components/schemas/EncodedObject'
    WorkflowStopRequest:
      type: object
      required:
        - workflowId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        reason:
          type: string
        stopType:
          type: string
          enum:
            - CANCEL # default behavior
            - TERMINATE # this will hard terminate the workflow
            # - FAIL TODO need server to support
    WorkflowGetDataObjectsRequest:
      type: object
      required:
        - workflowId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        keys: # return all objects if this is empty
          type: array
          items:
            type: string
    WorkflowGetDataObjectsResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    WorkflowGetSearchAttributesRequest:
      type: object
      required:
        - workflowId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        keys: # return all search attributes if this is empty
          type: array
          items:
            $ref: '#/components/schemas/SearchAttributeKeyAndType'
    WorkflowGetSearchAttributesResponse:
      type: object
      properties:
        searchAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SearchAttribute'
    WorkflowGetRequest:
      type: object
      required:
        - workflowId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        needsResults: # result will be return if this is true, and workflow is completed
          type: boolean
        waitTimeSeconds: # amount of time that the request will be waiting for, only works for getWithWait API
          type: integer
    WorkflowGetResponse:
      type: object
      required:
        - workflowRunId
        - workflowStatus
      properties:
        workflowRunId:
          type: string
        workflowStatus:
          type: string
          enum:
            - RUNNING
            - COMPLETED
            - FAILED
            - TIMEOUT
            - TERMINATED
            - CANCELED
            - CONTINUED_AS_NEW
        results: # result will be return if needsResults is true in request, and workflow is completed
          type: array
          items:
            $ref: '#/components/schemas/StateCompletionOutput'
    StateCompletionOutput:
      type: object
      required:
        - completedStateExecutionId
        - completedStateId
      properties:
        completedStateId:
          type: string
        completedStateExecutionId:
          type: string
        completedStateOutput:
          $ref: '#/components/schemas/EncodedObject'
    WorkflowSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
        pageSize:
          type: integer
          format: int32
    WorkflowSearchResponse:
      type: object
      properties:
        workflowExecutions:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSearchResponseEntry'
    WorkflowSearchResponseEntry:
      type: object
      required:
        - workflowId
        - workflowRunId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
    WorkflowResetRequest:
      type: object
      required:
        - workflowId
        - resetType
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        resetType:
          type: string
          enum:
            - HISTORY_EVENT_ID
            - BEGINNING
            - HISTORY_EVENT_TIME
        historyEventId: #required for resetType of HISTORY_EVENT_ID. The eventID of any event after DecisionTaskStarted you want to reset to (this event is exclusive in a new run. The new run history will fork and continue from the previous eventID of this). It can be DecisionTaskCompleted, DecisionTaskFailed or others
          type: integer
        reason: #reason to do the reset for tracking purpose
          type: string
        historyEventTime: #Earliest time of history event time, required for resetType of HISTORY_EVENT_TIME.Supported formats are '2006-01-02T15:04:05+07:00', raw UnixNano and time range (N<duration>), where 0 < N < 1000000 and duration (full-notation/short-notation) can be second/s, minute/m, hour/h, day/d, week/w, month/M or year/y. For example, '15minute' or '15m' implies last 15 minutes, meaning that workflow will be reset to the first decision that completed in last 15 minutes
          type: string
        skipSignalReapply: # whether skipping signals reapply after the reset point
          type: boolean
    WorkflowResetResponse:
      type: object
      required:
        - workflowRunId
      properties:
        workflowRunId:
          type: string
    WorkflowStateStartRequest:
      type: object
      required:
        - context
        - workflowStateId
        - workflowType
      properties:
        context:
          $ref: '#/components/schemas/Context'
        workflowType:
          type: string
        workflowStateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        searchAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SearchAttribute'
        dataObjects:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    WorkflowStateStartResponse:
      type: object
      properties:
        upsertSearchAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SearchAttribute'
        upsertDataObjects:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
        upsertStateLocals:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        recordEvents:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        publishToInterStateChannel:
          type: array
          items:
            $ref: '#/components/schemas/InterStateChannelPublishing'
    WorkflowStateDecideRequest:
      type: object
      required:
        - context
        - workflowType
        - workflowStateId
      properties:
        context:
          $ref: '#/components/schemas/Context'
        workflowType:
          type: string
        workflowStateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        searchAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SearchAttribute'
        DataObjects:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        stateLocals :
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        commandResults:
          $ref: '#/components/schemas/CommandResults'
    WorkflowStateDecideResponse:
      type: object
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        upsertSearchAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SearchAttribute'
        upsertDataObjects:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        recordEvents:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        upsertStateLocals: # this is probably no much value but we keep it to make the APIs more consistent
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        publishToInterStateChannel:
          type: array
          items:
            $ref: '#/components/schemas/InterStateChannelPublishing'
    StateDecision:
      type: object
      properties:
#        waitForMoreCommandResults:
#          type: boolean
        nextStates:
          type: array
          items:
            $ref: '#/components/schemas/StateMovement'
    StateMovement:
      type: object
      required:
        - stateId
      properties:
        stateId:
          type: string
        nextStateInput:
          $ref: '#/components/schemas/EncodedObject'
        nextStateOptions:
          $ref: '#/components/schemas/WorkflowStateOptions'
    CommandRequest:
      type: object
      required:
        - deciderTriggerType
      properties:
        deciderTriggerType:
          type: string
          enum:
            - ALL_COMMAND_COMPLETED
            - ANY_COMMAND_COMPLETED
#            - ANY_COMMAND_CLOSED
#        activityCommands:
#          type: array
#          items:
#            $ref: '#/components/schemas/ActivityCommand'
        timerCommands:
          type: array
          items:
            $ref: '#/components/schemas/TimerCommand'
        signalCommands:
          type: array
          items:
            $ref: '#/components/schemas/SignalCommand'
        interStateChannelCommands:
          type: array
          items:
            $ref: '#/components/schemas/InterStateChannelCommand'
    CommandResults:
      type: object
      properties:
#        activityResults:
#          type: array
#          items:
#            $ref: '#/components/schemas/ActivityResult'
        signalResults:
          type: array
          items:
            $ref: '#/components/schemas/SignalResult'
        interStateChannelResults:
          type: array
          items:
            $ref: '#/components/schemas/InterStateChannelResult'
        timerResults:
          type: array
          items:
            $ref: '#/components/schemas/TimerResult'
#    ActivityCommand:
#      required:
#        - commandId
#        - activityType
#      type: object
#      properties:
#        commandId:
#          type: string
#        activityType:
#          type: string
#        input:
#          $ref: '#/components/schemas/EncodedObject'
#        activityOptions:
#          $ref: '#/components/schemas/ActivityOptions'
    TimerCommand:
      type: object
      required:
        - commandId
        - firingUnixTimestampSeconds
      properties:
        commandId:
          type: string
        firingUnixTimestampSeconds:
          type: integer
          format: int64
    SignalCommand:
      type: object
      required:
        - commandId
        - signalChannelName
      properties:
        commandId:
          type: string
        signalChannelName:
          type: string
    InterStateChannelCommand:
      type: object
      required:
        - commandId
        - channelName
      properties:
        commandId:
          type: string
        channelName:
          type: string
#    ActivityOptions:
#      type: object
#      properties:
#        startToCloseTimeoutSeconds:
#          type: integer
#    ActivityResult:
#      type: object
#      required:
#        - commandId
#        - activityType
#        - activityStatus
#      properties:
#        commandId:
#          type: string
#        activityType:
#          type: string
#        output:
#          $ref: '#/components/schemas/EncodedObject'
#        activityStatus:
#          type: string
#          enum:
#            - OPEN
#            - COMPLETED
#            - TIMEOUT
#            - FAILED
#        timeoutType:
#          type: string
#          enum:
#            - SCHEDULED_TO_START
#            - START_TO_CLOSE
#            - SCHEDULE_TO_CLOSE
#            - HEARTBEAT
    TimerResult:
      type: object
      required:
        - commandId
        - timerStatus
      properties:
        commandId:
          type: string
        timerStatus:
          type: string
          enum:
            - SCHEDULED
            - FIRED
    SignalResult:
      type: object
      required:
        - commandId
        - signalChannelName
        - signalRequestStatus
      properties:
        commandId:
          type: string
        signalRequestStatus:
          type: string
          enum:
            - WAITING
            - RECEIVED
        signalChannelName:
          type: string
        signalValue:
          $ref: '#/components/schemas/EncodedObject'
    InterStateChannelResult:
      type: object
      required:
        - commandId
        - channelName
        - requestStatus
      properties:
        commandId:
          type: string
        requestStatus:
          type: string
          enum:
            - WAITING
            - RECEIVED
        channelName:
          type: string
        value:
          $ref: '#/components/schemas/EncodedObject'
    InterStateChannelPublishing:
      type: object
      required:
        - channelName
      properties:
        channelName:
          type: string
        value:
          $ref: '#/components/schemas/EncodedObject'
    Context:
      type: object
      required:
        - commandId
        - workflowId
        - workflowRunId
        - workflowStartedTimestamp
        - stateExecutionId
      properties:
        workflowId:
          type: string
        workflowRunId:
          type: string
        workflowStartedTimestamp:
          type: integer
          format: int64
        stateExecutionId:
          type: string          
